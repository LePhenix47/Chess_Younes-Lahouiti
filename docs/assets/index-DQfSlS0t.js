var e=Object.defineProperty,t=(t,n,i)=>((t,n,i)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[n]=i)(t,"symbol"!=typeof n?n+"":n,i);!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const n=document.createElement("template");n.innerHTML='\n  <style>\n    \n/* \n    Hides the element and all its descendants from view\n */\n.hide {\n    display: none !important;\n}\n\n/* \n    Hides the element from view except for screen readers \n    \n    - Good for accessibilty and by consequence SEO\n*/\n.screen-readers-only {\n    /*    \n    Positions the element off the screen \n    */ \n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n\n    /*    \n    Sets the dimensions of the element to 1×1 px \n    */ \n    height: 1px;\n    width: 1px;\n\n    /*    \n    Hides any content that overflows the element \n    */ \n    overflow: hidden;\n\n    /*    \n    Positions the element absolutely \n    */ \n    position: absolute;\n\n    /*    \n    Prevents line breaks in the element \n    */ \n    white-space: nowrap;\n}\n\n/* \n    Disables pointer (click on desktop and tap on mobile) events for the element and its descendants \n*/\n.no-pointer-events {\n    pointer-events: none;\n}\n\n\n    \n@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@100;400;500;700&display=swap);\n\n@layer web-component-reset {\n  @media(prefers-reduced-motion:reduce) {\n      *, :after, :before {\n          animation: none !important;\n          transition: none !important\n      }\n  }\n\n  *, :after, :before {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0\n  }\n  \n  ::-moz-selection {\n      -webkit-text-stroke: transparent;\n      background-color: var(--selection-bg-color);\n      color: var(--selection-color)\n  }\n  \n  ::selection {\n      -webkit-text-stroke: transparent;\n      background-color: var(--selection-bg-color);\n      color: var(--selection-color)\n  }\n  \n  html {\n      color-scheme: dark light;\n      scroll-behavior: smooth\n  }\n  \n  body {\n      background-color: var(--bg-primary);\n      color: var(--color-primary);\n      min-height: 100vh;\n      overflow-x: hidden;\n      transition: background-color .65s ease-in-out, color .35s ease-in-out\n  }\n  \n  :is(ul, ol) {\n      list-style-type: none\n  }\n  \n  button {\n      background-color: transparent;\n      border-color: transparent;\n      color: inherit;\n      font-family: inherit\n  }\n  \n  button:hover {\n      cursor: pointer\n  }\n  \n  button:hover:disabled {\n      cursor: not-allowed\n  }\n  \n  input {\n      border-color: transparent;\n      font-family: inherit;\n      outline-color: transparent\n  }\n  \n  input:hover {\n      cursor: pointer\n  }\n  \n  input:focus {\n      border-color: transparent;\n      outline: transparent\n  }\n  \n  input:disabled {\n      cursor: not-allowed\n  }\n  \n  textarea {\n      font-family: inherit\n  }\n  \n  textarea, textarea:focus {\n      border-color: transparent\n  }\n  \n  textarea:focus {\n      outline: transparent\n  }\n  \n  a {\n      color: inherit;\n      text-decoration: none\n  }\n  \n  a:visited {\n      color: currentColor\n  }\n  \n  label:hover {\n      cursor: pointer\n  }\n  \n  fieldset {\n      border-color: transparent\n  }\n  \n  legend {\n      position: static\n  }\n  \n  dialog {\n      inset: 50%;\n      margin: 0;\n      padding: 0;\n      position: fixed;\n      translate: -50% -50%;\n      z-index: 0\n  }\n  \n  dialog, select {\n      border: transparent\n  }\n  \n  select {\n      font-family: inherit\n  }\n  \n  select:hover {\n      cursor: pointer\n  }\n  \n  option {\n      font-family: inherit\n  }\n  \n  :is(p, h1, h2, h3, h4, h5, h6, span):empty {\n      display: none !important\n  }\n  input[type=text]:hover {\n    cursor: text;\n  }\n  input[type=button]:hover {\n    cursor: pointer;\n  }\n  input[type=date]:hover {\n    cursor: text;\n  }\n  input[type=datetime]:hover {\n    cursor: text;\n  }\n  input[type=datetime-local]:hover {\n    cursor: text;\n  }\n  input[type=email]:hover {\n    cursor: text;\n  }\n  input[type=month]:hover {\n    cursor: text;\n  }\n  input[type=week]:hover {\n    cursor: text;\n  }\n  input[type=password]:hover {\n    cursor: text;\n  }\n  input[type=tel]:hover {\n    cursor: text;\n  }\n  input[type=time]:hover {\n    cursor: text;\n  }\n  input[type=url]:hover {\n    cursor: text;\n  }\n  input[type=submit]:hover {\n    cursor: pointer;\n  }\n  input[type=reset]:hover {\n    cursor: pointer;\n  }\n  input[type=image]:hover {\n    cursor: pointer;\n  }\n  input[type=hidden]:hover {\n    cursor: pointer;\n  }\n  input[type=file] {\n    --file-selector-display: initial;\n    --file-selector-width: 80px;\n    --file-selector-height: 21px;\n  }\n  input[type=file]:hover {\n    cursor: pointer;\n  }\n  input[type=file]::file-selector-button {\n    display: var(--file-selector-display);\n    height: var(--file-selector-height);\n    width: var(--file-selector-width);\n  }\n  input[type=color] {\n    background-color: transparent;\n    --color-swatch-display: inline-block;\n    --color-swatch-height: 100%;\n    --color-swatch-border-width: 1px;\n    --color-swatch-border-color: currentColor;\n  }\n  input[type=color]:hover {\n    cursor: pointer;\n  }\n  input[type=color]::-moz-color-swatch {\n    display: var(--color-swatch-display);\n    height: var(--color-swatch-height);\n    border: var(--color-swatch-border-width) solid var(--color-swatch-border-color);\n  }\n  input[type=color]::-webkit-color-swatch {\n    display: var(--color-swatch-display);\n    height: var(--color-swatch-height);\n    border: var(--color-swatch-border-width) solid var(--color-swatch-border-color);\n  }\n  input[type=search] {\n    --cancel-button-display: initial;\n    --results-button-display: initial;\n  }\n  input[type=search]:hover {\n    cursor: text;\n  }\n  input[type=search]::-webkit-search-cancel-button {\n    display: var(--cancel-button-display);\n  }\n  input[type=search]::-webkit-search-results-button {\n    display: var(--results-button-display);\n  }\n  input[type=number] {\n    --inner-spin-appearance: auto;\n    --outer-spin-appearance: auto;\n    --moz-appearance: initial;\n    /*\n        Ignore the warning, this is to reset the input on Firefox\n        */\n    -moz-appearance: var(--moz-appearance);\n  }\n  input[type=number]:hover {\n    cursor: text;\n  }\n  input[type=number]::-webkit-inner-spin-button {\n    appearance: var(--inner-spin-appearance);\n  }\n  input[type=number]::-webkit-outer-spin-button {\n    appearance: var(--outer-spin-appearance);\n  }\n  input[type=range] {\n    border-radius: var(--thumb-border-radius);\n    --track-width: 160px;\n    --track-height: 20px;\n    --track-bg: #e9e9ed;\n    --track-appearance: none;\n    background-color: var(--track-bg);\n    appearance: var(--track-appearance);\n    overflow: hidden;\n    --thumb-appearance: none;\n    --thumb-bg: #484851;\n    --thumb-border-color: white;\n    --thumb-border-width: 0px;\n    --thumb-border-radius: 100vmax;\n    --thumb-width: 15px;\n    --thumb-height: 15px;\n    --inner-track-size: calc(var(--track-width));\n    --inner-track-offset: calc(\n      -1 * var(--track-width) - var(--thumb-width) / 2\n    );\n    --inner-track-bg: #2374ff;\n  }\n  input[type=range]:hover {\n    cursor: grab;\n  }\n  input[type=range]:active {\n    cursor: grabbing;\n  }\n  input[type=range]::-webkit-slider-runnable-track {\n    background-color: var(--track-bg);\n    width: var(--track-width);\n    height: var(--track-bg);\n  }\n  input[type=range]::-moz-range-track {\n    background-color: var(--track-bg);\n    width: var(--track-width);\n    height: var(--track-bg);\n  }\n  input[type=range]::-webkit-slider-thumb {\n    appearance: var(--thumb-appearance);\n    -webkit-appearance: var(--thumb-appearance);\n    background-color: var(--thumb-bg);\n    color: var(--thumb-bg);\n    border: var(--thumb-border-width) solid var(--thumb-border-color);\n    border-radius: var(--thumb-border-radius);\n    width: var(--thumb-width);\n    height: var(--thumb-height);\n    box-shadow: var(--inner-track-offset) 0 0 var(--inner-track-size) var(--inner-track-bg);\n  }\n  input[type=range]::-moz-range-thumb {\n    appearance: var(--thumb-appearance) !important;\n    background-color: var(--thumb-bg);\n    border: var(--thumb-border-width) solid var(--thumb-border-color);\n    border-radius: var(--thumb-border-radius);\n    width: var(--thumb-width);\n    height: var(--thumb-height);\n    box-shadow: var(--inner-track-offset) 0 0 var(--inner-track-size) var(--inner-track-bg);\n  }\n}\n\n    \n:host {\n    --bg-primary: rgb(255, 255, 255);\n    --bg-secondary: #f0efef;\n    --bg-tertiary: #676767;\n\n    --semi-transparent-bg: rgba(255, 255, 255, 50%);\n\n    --color-primary: black;\n    --color-secondary: gray;\n\n    --scrollbar-track-bg-color: white;\n\n    --disabled-button-bg: #afafaf;\n\n    --scrollbar-thumb-bg-color: #545454;\n    --scrollbar-thumb-bg-color--hover: #757575;\n    --scrollbar-thumb-bg-color--active: #b0b0b0;\n\n    --selection-bg-color: hwb(240 0% 0%);\n    --selection-color: white;\n}\n\n::backdrop {\n    --backdrop-bg-color: rgba(255, 255, 255, 0.5);\n\n    --scrollbar-track-bg-color: white;\n\n    --scrollbar-thumb-bg-color: #545454;\n    --scrollbar-thumb-bg-color--hover: #757575;\n    --scrollbar-thumb-bg-color--active: #b0b0b0;\n}\n\n    \n@media (prefers-color-scheme: dark) {\n    :host {\n        --bg-primary: black;\n        --bg-secondary: #232323;\n        --bg-tertiary: #7a7a7a;\n\n        --color-primary: white;\n\n        --semi-transparent-bg: rgba(0, 0, 0, 50%);\n\n        --scrollbar-track-bg-color: black;\n        --scrollbar-thumb-bg-color: #ababab;\n        --scrollbar-thumb-bg-color--hover: #8a8a8a;\n        --scrollbar-thumb-bg-color--active: #4f4f4f;\n\n        --selection-bg: #838383;\n        --selection-color: white;\n\n        --selection-bg-color: orange;\n        --selection-color: black;\n    }\n\n\n    ::backdrop {\n        --backdrop-bg-color: rgba(0, 0, 0, 0.5);\n\n        --scrollbar-track-bg-color: black;\n\n        --scrollbar-thumb-bg-color: #ababab;\n        --scrollbar-thumb-bg-color--hover: #8a8a8a;\n        --scrollbar-thumb-bg-color--active: #4f4f4f;\n    }\n}\n\n\n    /* Actual CSS style for the web component*/\n    \n user-component{\n  isolation: isolate;\n  /* Other CSS styles here */\n }\n\n  </style>\n  \n  \n <figure>\n  <slot name="title" />\n  <slot name="image" />\n </figure>\n\n';class i extends HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"}),t=n.content.cloneNode(!0);e.appendChild(t)}static get observedAttributes(){return[]}connectedCallback(){}disconnectedCallback(){}attributeChangedCallback(e,t,n){}}function o(e,t){return document.querySelector(e)}customElements.define("web-component",i);const r=class{};t(r,"fileMap",new Map(Array.from({length:8},((e,t)=>[t,String.fromCharCode(97+t)])))),t(r,"reverseFileMap",new Map(Array.from({length:8},((e,t)=>[String.fromCharCode(97+t),t])))),t(r,"rankMap",new Map(Array.from({length:8},((e,t)=>[t,(8-t).toString()])))),t(r,"reverseRankMap",new Map(Array.from({length:8},((e,t)=>[(8-t).toString(),t])))),t(r,"pieceToEmojiMap",new Map(Object.entries({P:"♙",N:"♘",B:"♗",R:"♖",Q:"♕",K:"♔",p:"♟",n:"♞",b:"♝",r:"♜",q:"♛",k:"♚"}))),t(r,"emojiToPieceMap",new Map(Object.entries({"♙":"P","♘":"N","♗":"B","♖":"R","♕":"Q","♔":"K","♟":"p","♞":"n","♝":"b","♜":"r","♛":"q","♚":"k"}))),t(r,"normalizePosition",(e=>{let t;if("string"==typeof e){const[n,i]=e;t={fileIndex:n,rankIndex:i,algebraicNotation:e}}else{const{fileIndex:n,rankIndex:i}=e;t={fileIndex:n,rankIndex:i,algebraicNotation:`${n}${i}`}}const n=r.reverseFileMap.get(t.fileIndex)??-1,i=r.reverseRankMap.get(t.rankIndex)??-1;if([n,i].includes(-1))throw new Error(`"Invalid position: ${t}`);return t.fileIndex=n.toString(),t.rankIndex=i.toString(),t})),t(r,"getBoardIndicesFromAlgebraicNotation",(e=>{const[t,n]=e;return{algebraicNotation:e,fileIndex:`${r.reverseFileMap.get(t)}`,rankIndex:`${r.reverseRankMap.get(n)}`}})),t(r,"getAlgebraicNotationFromBoardIndices",((e,t)=>{const n=r.fileMap.get(e),i=r.rankMap.get(t);return n&&i?`${n}${i}`:(console.error(`Invalid board indices: fileIndex = ${e}, rankIndex = ${t}`),"")})),t(r,"isSquareOfType",((e,t)=>{const{fileIndex:n,rankIndex:i}=r.getBoardIndicesFromAlgebraicNotation(e),o=(Number(n)+Number(i))%2==0;return"light"===t?o:!o})),t(r,"getRookSide",((e,t)=>{const[n,i]=e;return i!==("white"===t?"1":"8")?null:"h"===n?"kingSide":"a"===n?"queenSide":null})),t(r,"getCastlingSide",((e,t,n)=>{const[i,o]=e,[r,a]=t,s="white"===n?"1":"8";return o!==s||a!==s?null:"e"===i&&"g"===r?"kingSide":"e"===i&&"c"===r?"queenSide":null}));let a=r;const s=class e{constructor(e,n,i){t(this,"type"),t(this,"color"),t(this,"position"),t(this,"hasMoved",!1),t(this,"isSlidingPiece",!1),t(this,"element",null),t(this,"checkSlidingPiece",(()=>{this.isSlidingPiece=this.isPieceSlidingPiece()})),t(this,"isPieceSlidingPiece",(()=>["rook","bishop","queen"].includes(this.type))),t(this,"createElement",(()=>{const e=document.createElement("span");return e.classList.add("chess__piece"),e.innerHTML=`\n      <svg>\n        <use href="#${this.color}-${this.type}"></use>\n      </svg>\n      \x3c!-- <p data-element="piece-debug">${this.position.fileIndex}${this.position.rankIndex}</p> --\x3e\n    `,e.style.setProperty("--_index-x",this.position.rankIndex),e.style.setProperty("--_index-y",this.position.fileIndex),e.dataset.position=this.position.algebraicNotation,e.dataset.piece=this.type,e.dataset.color=this.color,e})),t(this,"attachToBoard",(e=>{if(!(e instanceof HTMLElement))throw new Error("Board is null");if(!this.element)throw new Error("Element is null");e.appendChild(this.element)})),t(this,"drag",((e,t)=>{if(!this.element)throw new Error("Element is null");this.element.classList.add("dragging","z-index","no-transition"),this.element.style.setProperty("--_drag-x",`${e}px`),this.element.style.setProperty("--_drag-y",`${t}px`)})),t(this,"updatePositionStyles",(e=>{this.element.style.setProperty("--_index-x",e.rankIndex),this.element.style.setProperty("--_index-y",e.fileIndex),this.element.dataset.position=e.algebraicNotation})),t(this,"updateDebugText",(e=>{var t;const n=null==(t=this.element)?void 0:t.querySelector("[data-element=piece-debug]");n&&(n.textContent=`${e.fileIndex}-${e.rankIndex}`)})),t(this,"clearDragOffset",(()=>{this.element.style.removeProperty("--_drag-x"),this.element.style.removeProperty("--_drag-y")})),t(this,"animateMove",(()=>{this.element.classList.add("z-index"),this.element.classList.remove("dragging");const e=t=>{["top","left"].includes(t.propertyName)&&(this.element.classList.remove("z-index"),this.element.removeEventListener("transitionend",e))};this.element.addEventListener("transitionend",e)})),t(this,"instantMove",(()=>{this.element.classList.remove("dragging"),this.element.classList.add("no-transition","z-index"),setTimeout((()=>{var e;null==(e=this.element)||e.classList.remove("no-transition","z-index")}),0)})),t(this,"moveTo",((e,t=!1)=>{this.clearDragOffset(),this.updatePositionStyles(e),this.updateDebugText(e),t?this.instantMove():this.animateMove(),this.updatePositionState(e)})),t(this,"updatePositionState",(e=>{const t=e.algebraicNotation!==this.position.algebraicNotation;!this.hasMoved&&t&&(this.hasMoved=!0),this.position=e})),t(this,"promotePawn",(e=>{"pawn"===this.type&&(this.promotePawnState(e),this.updatePromotionVisuals())})),t(this,"promotePawnState",(e=>{this.type=e,this.checkSlidingPiece()})),t(this,"updatePromotionVisuals",(()=>{this.element.dataset.piece=this.type;this.element.querySelector("use").setAttribute("href",`#${this.color}-${this.type}`)})),t(this,"isCastlingMove",((e,t)=>{const n=Number(a.getBoardIndicesFromAlgebraicNotation(e).fileIndex),i=Number(a.getBoardIndicesFromAlgebraicNotation(t).fileIndex),o="king"===this.type,r=2===Math.abs(i-n);return o&&r})),t(this,"isPawnDoubleAdvance",((e,t)=>{if("pawn"!==this.type)return!1;const n=a.getBoardIndicesFromAlgebraicNotation(e),i=a.getBoardIndicesFromAlgebraicNotation(t);return 2===Math.abs(Number(i.rankIndex)-Number(n.rankIndex))})),t(this,"toFEN",(()=>{const e=new Map(Object.entries({pawn:"p",rook:"r",knight:"n",bishop:"b",queen:"q",king:"k"})).get(this.type);if(!e)throw new Error(`Unknown piece type: ${this.type}`);return"white"===this.color?e.toUpperCase():e})),t(this,"removePiece",(({animate:e=!1}={})=>{if(!this.element)return;const t=e=>{Boolean(e)&&"opacity"!==e.propertyName||(e&&this.element.removeEventListener("transitionend",t),this.removeElementFromDOM())};e?(this.element.classList.add("captured"),this.element.addEventListener("transitionend",t)):t()})),t(this,"removeElementFromDOM",(()=>{this.element&&(this.element.remove(),this.element=null)})),this.type=e,this.color=n,this.position=i,this.checkSlidingPiece(),this.element=this.createElement()}get fenSymbol(){return e.getFenSymbol(this.type,this.color)}get pgnSymbol(){if(e.isType(this.type,"pawn"))return"";return e.getPgnSymbol(this.type)}};t(s,"pieceToFenSymbolMap",new Map(Object.entries({"white-pawn":"P","white-knight":"N","white-bishop":"B","white-rook":"R","white-queen":"Q","white-king":"K","black-pawn":"p","black-knight":"n","black-bishop":"b","black-rook":"r","black-queen":"q","black-king":"k"}))),t(s,"fenSymbolToPieceMap",new Map(Object.entries({P:{color:"white",type:"pawn"},N:{color:"white",type:"knight"},B:{color:"white",type:"bishop"},R:{color:"white",type:"rook"},Q:{color:"white",type:"queen"},K:{color:"white",type:"king"},p:{color:"black",type:"pawn"},n:{color:"black",type:"knight"},b:{color:"black",type:"bishop"},r:{color:"black",type:"rook"},q:{color:"black",type:"queen"},k:{color:"black",type:"king"}}))),t(s,"isType",((e,t)=>(Array.isArray(t)?t:[t]).includes(e instanceof s?e.type:e))),t(s,"arePiecesTheSame",((e,t)=>e.type===t.type&&e.color===t.color&&e.position.algebraicNotation===t.position.algebraicNotation)),t(s,"getPgnSymbol",(e=>{const t=`white-${e}`;return s.pieceToFenSymbolMap.get(t)})),t(s,"getFenSymbol",((e,t)=>{const n=`${t}-${e}`;return s.pieceToFenSymbolMap.get(n)}));let l=s;class c{constructor(e){t(this,"color"),t(this,"castlingRights",{kingSide:!0,queenSide:!0}),t(this,"canCastle",new Map(Object.entries(this.castlingRights))),t(this,"inCheck",!1),t(this,"toggleOneSideCastling",((e,t)=>(this.canCastle.set(e,t),this))),t(this,"toggleAllCastling",(e=>(this.canCastle.set("kingSide",e),this.canCastle.set("queenSide",e),this))),t(this,"setInCheck",(e=>(this.inCheck=e,this))),t(this,"reset",(()=>(this.toggleAllCastling(!0),this.inCheck=!1,this))),this.color=e}}const h=class{static isWithinBounds(e,t){return e>=0&&e<8&&(t>=0&&t<8)}};t(h,"isFenPositionPlayable",(e=>{try{const{piecesMap:t,allLegalMovesForCurrentPlayer:n}=e,i=F.getPlayerMaterial(t,"white"),o=F.getPlayerMaterial(t,"black");if(1!==i.kings||1!==o.kings)return!1;for(const[e,s]of t.entries()){if("pawn"!==s.type)continue;const[t,n]=e;if("1"===n||"8"===n)return!1}const r=h.isKingInCheck(t,e.whitePlayer),a=h.isKingInCheck(t,e.blackPlayer);return(!r||!a)&&(!("white"===e.currentTurn&&a||"black"===e.currentTurn&&r)&&(console.log("allLegalMovesForCurrentPlayer",n),!!n.length))}catch(t){return console.log(t),!1}})),t(h,"isCheckmate",(({legalMoves:e,currentPlayer:t})=>t.inCheck&&0===e.length)),t(h,"isStalemate",(({legalMoves:e,currentPlayer:t})=>!t.inCheck&&0===e.length)),t(h,"isThreefoldRepetitionDraw",(e=>{for(const t of e.values())if(t>=3)return!0;return!1})),t(h,"isFiftyMoveRuleDraw",(e=>e>=100)),t(h,"isInsufficientMaterialDraw",(e=>{const t=F.getPlayerMaterial(e,"white"),n=F.getPlayerMaterial(e,"black"),i=h.hasInsufficientMaterialForPlayer(t),o=h.hasInsufficientMaterialForPlayer(n);if(!i||!o)return!1;const r=[i,o];if(r.every((e=>"king-only"===e)))return!0;if(r.every((e=>"king-and-same-color-bishops"===e))){return Array.from(t.bishopColors)[0]===Array.from(n.bishopColors)[0]}return!(!r.includes("king-only")||!r.includes("king-and-same-color-bishops"))||!(!r.includes("king-only")||!r.includes("king-and-one-knight"))})),t(h,"hasInsufficientMaterialForPlayer",(e=>{if([e.pawns,e.rooks,e.queens].some((e=>e>0)))return null;if(e.knights>1)return null;if(1===e.kings&&0===e.bishops&&0===e.knights)return"king-only";if(1===e.kings&&1===e.knights&&0===e.bishops)return"king-and-one-knight";return 1===e.kings&&0===e.knights&&e.bishops>0&&1===e.bishopColors.size?"king-and-same-color-bishops":null})),t(h,"isMoveLegal",((e,t,n)=>{var i;if(t.color!==e.currentTurn)return console.error("Not your turn! Cannot move piece."),!1;const o=e.piecesMap.get(n);if((null==o?void 0:o.color)===t.color)return console.warn("Square occupied by friendly piece."),!1;return!!(null==(i=e.legalMovesForSelectedPiece)?void 0:i.includes(n))||(console.warn("Illegal pseudo-move!"),!1)})),t(h,"isKingInCheck",((e,t,n)=>{const i=F.getPieceFromArray(e,"king",t.color);if(!i)return!1;return(n??f.getAttackedSquaresByOpponentDetailed(t,e)).flatMap((e=>e.directions.flatMap((e=>e.attacks)))).includes(i.position.algebraicNotation)})),t(h,"canPromotePawn",((e,t)=>{if("pawn"!==e.type)return!1;const[n,i]=t,o=a.reverseRankMap.get(i),r="white"===e.color&&0===o,s="black"===e.color&&7===o;return r||s})),t(h,"filterIllegalKingMoves",((e,t)=>e.filter((e=>!t.includes(e))))),t(h,"getAttackingPiecesAndPathToKing",((e,t,n,i)=>{if(e.color!==t.color)throw new Error("King must be of the player's color");const o=e.position.algebraicNotation,r=i??f.getAttackedSquaresByOpponentDetailed(t,n),a=[];for(const s of r)for(const e of s.directions){const t=e.attacks.indexOf(o);if(-1===t)continue;const n=e.attacks.slice(0,t),i=[s.from,...n];a.push({attackingPiece:s.piece,pathToKing:i})}return a})),t(h,"getCastleFileRank",((e,t,n=!1)=>{const i="white"===t?"1":"8",o="kingSide"===e?["f","g"]:["c","d"];return n&&(o.push("e"),o.sort()),{rank:i,files:o}})),t(h,"getCastleDangerSquares",((e,t,n=!1)=>{const{files:i,rank:o}=h.getCastleFileRank(e,t,n);return i.map((e=>`${e}${o}`))})),t(h,"canCastle",((e,t,n,i)=>{if(!t.canCastle.get(e)||t.inCheck)return null;const{color:o}=t;let r,a;"white"===o?(r=u.King,a="queenSide"===e?u.QueenSideRook:u.KingSideRook):(r=g.King,a="queenSide"===e?g.QueenSideRook:g.KingSideRook);const s=n.get(r),l=n.get(a);if(!Boolean(s)||!Boolean(l)||"king"!==s.type||"rook"!==l.type)return null;if(s.hasMoved||l.hasMoved)return null;const c=h.getCastleDangerSquares(e,t.color),d=f.getAttackedSquaresByOpponent(t,n,i);for(const h of c)if(d.includes(h)||n.has(h))return null;return[{piece:s,position:r},{piece:l,position:a}]})),t(h,"getPinnedPieces",((e,t)=>{const n=[];if(!e)return n;const i=Number(e.position.fileIndex),o=Number(e.position.rankIndex);for(const[r,[s,c]]of m.directionOffsetsMap){let d=i+s,u=o+c,g=null;const p=[];for(;h.isWithinBounds(d,u);){const i=a.getAlgebraicNotationFromBoardIndices(d,u),o=t.get(i);if(!o){g&&p.push(i),d+=s,u+=c;continue}if(o.color===e.color){if(g)break;g=o,d+=s,u+=c;continue}const h=l.isType(o.type,["rook","bishop","queen"]),b=m.slidingDirectionsMap.get(o.type),f=h&&(null==b?void 0:b.includes(r));g&&f&&n.push({pinned:g,by:o,direction:[s,c],pathToPin:p});break}}return n})),t(h,"isIllegalEnPassantDiscoveredCheck",((e,t,n)=>{if(!t)return!1;const i=a.getBoardIndicesFromAlgebraicNotation(t),o="white"===e.color?Number(i.rankIndex)+1:Number(i.rankIndex)-1;console.log(i);const r=Number(i.fileIndex),s=a.getAlgebraicNotationFromBoardIndices(r,o),l=a.getBoardIndicesFromAlgebraicNotation(e.position.algebraicNotation);if(Number(l.rankIndex)!==o)return!1;const c=o,d=Number(l.fileIndex),u=r>d?1:-1;let g=d+u,p=0,m=!1;for(;h.isWithinBounds(g,c);){const e=a.getAlgebraicNotationFromBoardIndices(g,c),t=n.get(e);if(e!==s&&t){switch(t.type){case"pawn":p++;break;case"rook":case"queen":m=!0}g+=u}else g+=u}return 1===p&&m}));let d=h;var u=(e=>(e.King="e1",e.QueenSideRook="a1",e.KingSideRook="h1",e))(u||{}),g=(e=>(e.King="e8",e.QueenSideRook="a8",e.KingSideRook="h8",e))(g||{});const p=class{};t(p,"cardinalDirectionOffsets",{N:[0,-1],S:[0,1],E:[1,0],W:[-1,0],NE:[1,-1],NW:[-1,-1],SE:[1,1],SW:[-1,1]}),t(p,"directionOffsetsMap",new Map(Object.entries(p.cardinalDirectionOffsets))),t(p,"slidingDirectionsMap",new Map(Object.entries({rook:["N","S","E","W"],bishop:["NE","NW","SE","SW"],queen:["N","S","E","W","NE","NW","SE","SW"]}))),t(p,"knightOffsets",[[1,2],[2,1],[2,-1],[1,-2],[-1,-2],[-2,-1],[-2,1],[-1,2]]),t(p,"generatePawnMoves",((e,t,n,i)=>{const o=[],r=[],s="white"===e.color?-1:1,l=Number(e.position.fileIndex),c=Number(e.position.rankIndex);if(n){const[t,o]=n.direction;if(0!==t)return(null==i?void 0:i.detailed)?{piece:e,moves:[]}:[]}const h=a.getAlgebraicNotationFromBoardIndices(l,c+s),d=t.get(h);d||p.addMoveToArray(h,i,o,r);const u=7-c;if("white"===e.color&&1===u||"black"===e.color&&6===u){const e=a.getAlgebraicNotationFromBoardIndices(l,c+2*s),n=t.get(e);!d&&!n&&p.addMoveToArray(e,i,o,r)}return(null==i?void 0:i.detailed)?{piece:e,moves:r}:o})),t(p,"generateKnightMoves",((e,t,n,i)=>{const o=[],r=[],{fileIndex:s,rankIndex:l}=a.getBoardIndicesFromAlgebraicNotation(e.position.algebraicNotation);if(n){return(null==i?void 0:i.detailed)?{piece:e,moves:[]}:[]}for(const[c,h]of p.knightOffsets){const n=Number(s)+c,u=Number(l)+h;if(!d.isWithinBounds(n,u))continue;const g=a.getAlgebraicNotationFromBoardIndices(n,u),m=t.get(g);m&&m.color===e.color||p.addMoveToArray(g,i,o,r)}return(null==i?void 0:i.detailed)?{piece:e,moves:r}:o})),t(p,"generateKingMoves",((e,t,n,i)=>{const o=[],r=[],s=[...Object.keys(p.cardinalDirectionOffsets)],l=Number(e.position.fileIndex),c=Number(e.position.rankIndex);for(const u of s){const[n,s]=p.directionOffsetsMap.get(u),h=l+n,g=c+s;if(!d.isWithinBounds(h,g))continue;const m=a.getAlgebraicNotationFromBoardIndices(h,g),b=t.get(m);(!b||b.color!==e.color)&&p.addMoveToArray(m,i,o,r)}if(!(null==i?void 0:i.includeCastling))return(null==i?void 0:i.detailed)?{piece:e,moves:r}:o;const h={kingSide:"white"===n.color?"g1":"g8",queenSide:"white"===n.color?"c1":"c8"};for(const a of["kingSide","queenSide"]){if(!d.canCastle(a,n,t))continue;const e=h[a];p.addMoveToArray(e,i,o,r)}return(null==i?void 0:i.detailed)?{piece:e,moves:r}:o})),t(p,"generateSlidingMoves",((e,t,n,i)=>{const o=p.slidingDirectionsMap.get(e.type);if(!o)return(null==i?void 0:i.detailed)?{piece:e,moves:[]}:[];const r=[],s=[],[l,c]=(null==n?void 0:n.direction)||[];for(const h of o){const[o,u]=p.directionOffsetsMap.get(h);if(n&&!k.areColinear(o,u,l,c))continue;let g=Number(e.position.fileIndex),m=Number(e.position.rankIndex);for(;g+=o,m+=u,d.isWithinBounds(g,m);){const n=a.getAlgebraicNotationFromBoardIndices(g,m),o=t.get(n),l=Boolean(o);if(l&&o.color===e.color)break;if(p.addMoveToArray(n,i,r,s),l&&o.color!==e.color)break}}return(null==i?void 0:i.detailed)?{piece:e,moves:s}:r})),t(p,"addMoveToArray",((e,t,n,i)=>{if(null==t?void 0:t.detailed){const t=a.getBoardIndicesFromAlgebraicNotation(e);i.push(t)}else n.push(e)}));let m=p;const b=class{};t(b,"generatePawnAttackSquares",((e,t)=>{const n=[],i=[],o="white"===e.color?-1:1,r=Number(e.position.fileIndex),s=Number(e.position.rankIndex)+o,l=r+-1,c=r+1;if(d.isWithinBounds(l,s)){const e=a.getAlgebraicNotationFromBoardIndices(l,s);(null==t?void 0:t.detailed)?i.push({direction:[-1,o],attacks:[e]}):n.push(e)}if(d.isWithinBounds(c,s)){const e=a.getAlgebraicNotationFromBoardIndices(c,s);(null==t?void 0:t.detailed)?i.push({direction:[1,o],attacks:[e]}):n.push(e)}return(null==t?void 0:t.detailed)?i:n})),t(b,"getLegalPawnCaptures",((e,t,n,i)=>{if(n){const[e,t]=n.direction;if(0===e||0===t)return[]}const o=[],r="white"===e.color?-1:1,s=Number(e.position.fileIndex),l=Number(e.position.rankIndex),c=s+-1,h=s+1,[u,g]=(null==n?void 0:n.direction)||[],p=l+r;if(d.isWithinBounds(c,p)&&(!n||n&&k.areColinear(-1,r,u,g))){const n=a.getAlgebraicNotationFromBoardIndices(c,p),i=t.get(n);Boolean(i)&&i.color!==e.color&&o.push(n)}if(d.isWithinBounds(h,p)&&(!n||n&&k.areColinear(1,r,u,g))){const n=a.getAlgebraicNotationFromBoardIndices(h,p),i=t.get(n);Boolean(i)&&i.color!==e.color&&o.push(n)}const m=F.getPieceFromArray(t,"king",e.color),b=d.isIllegalEnPassantDiscoveredCheck(m,i,t);if(i&&!b){const e=a.getBoardIndicesFromAlgebraicNotation(i),t=Number(e.fileIndex)-s,c=Number(e.rankIndex)-l,h=1===Math.abs(t)&&c===r,d=!n||k.areColinear(t,c,u,g);console.log({isDiagonal:h,isColinearWithPin:d}),h&&d&&o.push(i)}return o})),t(b,"getKnightAttackingSquares",((e,t)=>{const n=[],i=[],{fileIndex:o,rankIndex:r}=a.getBoardIndicesFromAlgebraicNotation(e.position.algebraicNotation);for(const[s,l]of m.knightOffsets){const e=Number(o)+s,c=Number(r)+l;if(!d.isWithinBounds(e,c))continue;const h=a.getAlgebraicNotationFromBoardIndices(e,c);(null==t?void 0:t.detailed)?i.push({direction:[s,l],attacks:[h]}):n.push(h)}return(null==t?void 0:t.detailed)?i:n})),t(b,"getExtendedAttackedSquaresForSlidingPiece",((e,t,n)=>{const i=[],o=[],r=Number(e.position.fileIndex),s=Number(e.position.rankIndex),l=m.slidingDirectionsMap.get(e.type);for(const c of l){const[l,h]=m.directionOffsetsMap.get(c);let u=r+l,g=s+h;const p=[];for(;d.isWithinBounds(u,g);){const n=a.getAlgebraicNotationFromBoardIndices(u,g),i=t.get(n);if(p.push(n),i){if("king"===i.type&&i.color!==e.color){const e=u+l,t=g+h;if(d.isWithinBounds(e,t)){const n=a.getAlgebraicNotationFromBoardIndices(e,t);p.push(n)}}break}u+=l,g+=h}(null==n?void 0:n.detailed)?p.length&&o.push({direction:[l,h],attacks:p}):i.push(...p)}return(null==n?void 0:n.detailed)?o:i})),t(b,"getKingAttackingSquares",(e=>{const t=[],n=[...Object.keys(m.cardinalDirectionOffsets)],i=Number(e.position.fileIndex),o=Number(e.position.rankIndex);for(const r of n){const[e,n]=m.directionOffsetsMap.get(r),s=i+e,l=o+n;if(!d.isWithinBounds(s,l))continue;const c=a.getAlgebraicNotationFromBoardIndices(s,l);t.push(c)}return t})),t(b,"getAttackedSquaresByOpponent",((e,t,n)=>{const i=(n??b.getAttackedSquaresByOpponentDetailed(e,t)).flatMap((e=>e.directions.flatMap((e=>e.attacks))));return[...new Set(i)]})),t(b,"getAttackedSquaresByOpponentDetailed",((e,t)=>{const n=[];for(const[i,o]of t){if(o.color===e.color)continue;let r=[];switch(o.type){case"pawn":r=b.generatePawnAttackSquares(o,{detailed:!0});break;case"knight":r=b.getKnightAttackingSquares(o,{detailed:!0});break;case"bishop":case"rook":case"queen":r=b.getExtendedAttackedSquaresForSlidingPiece(o,t,{detailed:!0});break;case"king":r=b.getKingAttackingSquares(o).map((e=>({direction:[0,0],attacks:[e]})));break}n.push({piece:o,from:i,directions:r})}return n}));let f=b;const v=class{};t(v,"generateLegalMoves",(({piecesMap:e,player:t,enPassantSquare:n=null,opponentAttacksDetailed:i})=>{const o=F.getPieceFromArray(e,"king",t.color),r=i??f.getAttackedSquaresByOpponentDetailed(t,e),a=v.generatePseudoLegalMoves(e,t,r,n);if(!t.inCheck)return a;const s=d.getAttackingPiecesAndPathToKing(o,t,e,r);if(s.length>1){return a.filter((({piece:e})=>"king"===e.type))}const{pathToKing:l,attackingPiece:c}=s[0],h=new Set(l),u=[];for(const{piece:d,moves:g}of a){if("king"===d.type){u.push({piece:d,moves:g});continue}const e=[];for(const t of g){const n=t===c.position.algebraicNotation,i=h.has(t);(n||i)&&e.push(t)}e.length>0&&u.push({piece:d,moves:e})}return u})),t(v,"generatePseudoLegalMoves",((e,t,n,i)=>{const o=[],r=F.getPieceFromArray(e,"king",t.color),a=d.getPinnedPieces(r,e),s=f.getAttackedSquaresByOpponent(t,e,n);for(const c of e.values()){if(c.color!==t.color)continue;const n=a.find((e=>l.arePiecesTheSame(e.pinned,c))),r=v.generateMoveForPiece(c,e,t,s,n,i);r.length>0&&o.push({piece:c,moves:r})}return o})),t(v,"generateMoveForPiece",((e,t,n,i,o,r)=>{switch(e.type){case"pawn":return[...m.generatePawnMoves(e,t,o),...f.getLegalPawnCaptures(e,t,o,r)];case"knight":return m.generateKnightMoves(e,t,o);case"bishop":case"rook":case"queen":return m.generateSlidingMoves(e,t,o);case"king":{let o=m.generateKingMoves(e,t,n,{includeCastling:!0});return o=d.filterIllegalKingMoves(o,i),o}default:return[]}})),t(v,"areColinear",((e,t,n,i)=>e*i==t*n));let k=v;const y=class{};t(y,"pieceSquareKeys"),t(y,"sideToMoveKey"),t(y,"castlingRightsKeys"),t(y,"enPassantFileKeys"),t(y,"initialize",(()=>{if(y.pieceSquareKeys)return;y.pieceSquareKeys=new Map,y.castlingRightsKeys=new Map,y.enPassantFileKeys=new Map,y.sideToMoveKey=y.random64BitBigInt();const e=["king","queen","rook","bishop","knight","pawn"],t=["white","black"],n=[...a.reverseFileMap.keys()],i=[...a.reverseRankMap.keys()],o=["white-kingSide","white-queenSide","black-kingSide","black-queenSide"];for(const r of t)for(const t of e)for(const e of n)for(const n of i){const i=`${r}-${t}-${e}${n}`;y.pieceSquareKeys.set(i,y.random64BitBigInt())}for(const r of o)y.castlingRightsKeys.set(r,y.random64BitBigInt());for(const r of n)y.enPassantFileKeys.set(r,y.random64BitBigInt())})),t(y,"random64BitBigInt",(()=>{const e=()=>BigInt(Math.floor(Math.random()*2**32));let t=e();t<<=32n;return t|e()})),t(y,"computeHash",((e,t,n)=>{y.initialize();let i=0n;for(const[o,r]of e.entries()){const e=`${r.color}-${r.type}-${o}`,t=y.pieceSquareKeys.get(e);t?i^=t:console.warn(`Missing Zobrist key for piece: ${e}`)}"black"===t.color&&(i^=y.sideToMoveKey);for(const[o,r]of t.canCastle.entries()){if(!r)continue;const e=`${t.color}-${o}`,n=y.castlingRightsKeys.get(e);n?i^=n:console.warn(`Missing Zobrist key for castling right: ${o}`)}if(n){const[e,t]=n,o=y.enPassantFileKeys.get(e);o?i^=o:console.warn(`Missing Zobrist key for en passant file: ${e}`)}return i}));let P=y;class S{constructor(e){t(this,"updatePlayerState",((e,t,n)=>{e.setInCheck(t),n&&(e.toggleOneSideCastling("kingSide",n.kingSide),e.toggleOneSideCastling("queenSide",n.queenSide))})),t(this,"switchTurnTo",(e=>{const{currentTurn:t}=this.chessBoardController;this.chessBoardController.currentTurn=e||("white"===t?"black":"white")})),t(this,"updateAllLegalMovesForCurrentPlayer",(()=>{const{piecesMap:e,currentPlayer:t,enPassantSquare:n}=this.chessBoardController,i=k.generateLegalMoves({piecesMap:e,player:t,enPassantSquare:n});this.chessBoardController.allLegalMovesForCurrentPlayer=i})),t(this,"getLegalMovesForSelectedPiece",(e=>{const t=this.chessBoardController.allLegalMovesForCurrentPlayer.find((({piece:t})=>l.arePiecesTheSame(t,e)));return(null==t?void 0:t.moves)||[]})),t(this,"resetBoardState",(()=>{this.chessBoardController.selectedPiece=null,this.chessBoardController.legalMovesForSelectedPiece=null,this.chessBoardController.selectedPieceLegalMoves=null,this.chessBoardController.allLegalMovesForCurrentPlayer=[],this.chessBoardController.enPassantSquare=null,this.chessBoardController.positionRepetitionMap.clear(),this.chessBoardController.halfMoveClock=0,this.chessBoardController.fullMoveNumber=1,this.chessBoardController.currentTurn="white",this.chessBoardController.isGameOver=null,this.chessBoardController.pgnMoveText=[],this.chessBoardController.whitePlayer.reset(),this.chessBoardController.blackPlayer.reset()})),t(this,"recordMoveAsHash",(()=>{const{piecesMap:e,currentPlayer:t,enPassantSquare:n,positionRepetitionMap:i}=this.chessBoardController,o=P.computeHash(e,t,n??null),r=i.get(o)??0;i.set(o,r+1)})),t(this,"removeCastlingRights",((e,t,n)=>{if("king"===t.type)return void e.toggleAllCastling(!1);const{fileIndex:i}=a.getBoardIndicesFromAlgebraicNotation(n),o="h"===a.fileMap.get(Number(i))?"kingSide":"queenSide";t.hasMoved||(e.toggleOneSideCastling(o,!1),console.log("removeCastlingRights",t,n))})),t(this,"handleCastling",((e,t)=>{const{piecesMap:n}=this.chessBoardController,{piece:i,from:o,to:r}=e,{fileIndex:s,rankIndex:l}=a.getBoardIndicesFromAlgebraicNotation(o),{fileIndex:c}=a.getBoardIndicesFromAlgebraicNotation(r),h=Number(s),d=Number(c)-h,[u,g]=o,p=d>0,m=p?`h${g}`:`a${g}`,b=p?`f${g}`:`d${g}`,f=n.get(m);f?(this.chessBoardController.movePiece(f,b,t),this.chessBoardController.updateGameState(m,b,f)):console.warn(`Rook not found at expected castling position: ${m}`)})),t(this,"getEnPassantMarking",(e=>{const{currentPlayer:t}=this.chessBoardController,n=a.getBoardIndicesFromAlgebraicNotation(e),i=Number(n.fileIndex),o=Number(n.rankIndex);if(!this.hasAdjacentOpponentPawn(i,o,t.color))return null;const r="white"===t.color?o+1:o-1;return a.getAlgebraicNotationFromBoardIndices(i,r)})),t(this,"hasAdjacentOpponentPawn",((e,t,n)=>{const{piecesMap:i}=this.chessBoardController,o=[e-1,e+1];for(const r of o){if(!d.isWithinBounds(r,t))continue;const e=a.getAlgebraicNotationFromBoardIndices(r,t),o=i.get(e);if("pawn"===(null==o?void 0:o.type)&&o.color!==n)return!0}return!1})),t(this,"getEnPassantCapturedSquare",((e,t)=>{const n=a.getBoardIndicesFromAlgebraicNotation(e),i=Number(n.fileIndex),o=Number(n.rankIndex),r="white"===t?o+1:o-1;return a.getAlgebraicNotationFromBoardIndices(i,r)})),t(this,"isEnPassantCapture",((e,t,n)=>{const{enPassantSquare:i,piecesMap:o}=this.chessBoardController,[r,a]=t,[s,l]=n,c="pawn"===e.type,h=r!==s,d=!o.has(n);return c&&h&&d&&i===n})),t(this,"clearEnPassantMarking",(()=>null)),this.chessBoardController=e}}const w=class e{constructor(n){t(this,"generateBoard",(()=>{this.chessBoardController.container.innerHTML="";for(let e=0;e<8;e++){const t=7-e;for(let n=0;n<8;n++){const i=this.createSquareElement(t,n,e);this.chessBoardController.container.appendChild(i);const o=i.dataset.algebraicNotation;this.chessBoardController.squareElementsMap.set(o,i)}}})),t(this,"createSquareElement",((e,t,n)=>{const i=document.createElement("div");i.classList.add("chess__square");const o=a.getAlgebraicNotationFromBoardIndices(t,n),r=a.isSquareOfType(o,"dark");return i.dataset.file=t.toString(),i.dataset.rank=e.toString(),i.dataset.algebraicNotation=o,i.dataset.square="",i.classList.add(r?"dark-square":"light-square"),this.addBoardLabels(i,t,n,r),i})),t(this,"addBoardLabels",((e,t,n,i)=>{const o=e=>["chess__label","chess__label--"+(i?"light":"dark"),`chess__label--${e}`];if(7===n){const n=document.createElement("p");n.classList.add(...o("file")),n.textContent=a.fileMap.get(t),e.appendChild(n)}if(0===t){const t=document.createElement("p");t.classList.add(...o("rank")),t.textContent=a.rankMap.get(n),e.appendChild(t)}})),t(this,"dragPiece",((e,t,n)=>{const{currentTurn:i}=this.chessBoardController;if(e.color!==i)return e.moveTo(e.position,!0),void console.error("It's not your turn! Cannot drag piece.");e.drag(t,n)})),t(this,"elementIsChessPiece",(e=>!!e&&e.hasAttribute("data-piece"))),t(this,"getPieceFromElement",(e=>{const{piecesMap:t}=this.chessBoardController;return[...t.values()].find((t=>t.element===e))||null})),t(this,"elementIsPieceSelected",(e=>{const t=this.getPieceFromElement(e);return Boolean(t)&&t===this.chessBoardController.selectedPiece})),t(this,"setSquareHighlightByAttribute",((e,t,n,i)=>{switch(i){case"add":e.setAttribute(t,n);break;case"remove":e.removeAttribute(t);break;case"toggle":e.hasAttribute(t)?e.removeAttribute(t):e.setAttribute(t,n);break;default:console.warn(`Unknown mode "${i}" passed to updateSquareHighlight`)}})),t(this,"setSquareHighlightByClassname",((e,t,n)=>{switch(n){case"add":e.classList.add(t);break;case"remove":e.classList.remove(t);break;case"toggle":e.classList.toggle(t);break;default:console.warn(`Unknown mode "${n}" passed to updateSquareHighlight`)}})),t(this,"updateSquareHighlight",(({targetSquares:t,type:n,mode:i="add",value:o="true",className:r=""})=>{o="add"===i?o:"";const a="string"==typeof t?[t]:t,s=e.attrMap.get(n);if(s||r)for(const e of a){const t=this.chessBoardController.squareElementsMap.get(e);t&&(s?this.setSquareHighlightByAttribute(t,s,o,i):this.setSquareHighlightByClassname(t,r,i))}else console.warn(`Unknown highlight type "${n}"`)})),t(this,"renderPromotionDialogHTML",((e,t,n)=>`\n      <div class="chess__promotion-popup-backdrop" data-element="promotion-dialog-backdrop"></div>\n      <dialog\n      aria-modal="true"\n      aria-label="Promote your pawn to another piece"\n      class="chess__promotion-popup ${this.chessBoardController.boardPerspective===n?"":"chess__promotion-popup--opponent-view"}" style="--_left: ${e}px; --_top: ${t}px;" data-element="promotion-dialog">\n        <ul class="chess__promotion-list">\n          ${["queen","rook","bishop","knight"].map((e=>`\n              <li class="chess__promotion-item" data-promotion-piece="${e}">\n                <button type="button" class="chess__promotion-piece" aria-label="${e} piece">\n                  <svg>\n                    <use href="#${n}-${e}"></use>\n                  </svg>\n\n                  <span class="chess__promotion-piece-name">${e}</span>\n                </button>\n              </li>`)).join("")}\n            <li class="chess__promotion-item chess__promotion-item--cancel" aria-label="Cancel promotion">\n              <button type="button" class="chess__promotion-cancel-button" data-element="promotion-cancel">×</button>\n            </li>\n        </ul>\n      </dialog>\n    `)),t(this,"getPromotionDialogCoordinates",(e=>{const{container:t,squareSize:n}=this.chessBoardController,{fileIndex:i,rankIndex:o}=a.getBoardIndicesFromAlgebraicNotation(e),r=t.getBoundingClientRect();return{left:Number(i)*n+r.left,top:Number(o)*n+r.top}})),t(this,"showPromotionDialog",((e,t)=>{this.clearPromotionDialog();const{left:n,top:i}=this.getPromotionDialogCoordinates(e),o=this.renderPromotionDialogHTML(n,i,t);return new Promise((e=>{this.injectPromotionDialog(o,e)}))})),t(this,"clearPromotionDialog",(()=>{this.chessBoardController.promotionDialogContainer&&(this.chessBoardController.promotionDialogContainer.removeEventListener("click",this.handlePromotionDialogEventsByDelegation),this.chessBoardController.promotionDialogContainer.remove(),this.chessBoardController.promotionDialogContainer=null)})),t(this,"injectPromotionDialog",((e,t)=>{const n=document.createElement("div");n.classList.add("chess__promotion-container"),n.innerHTML=e;document.querySelector("[data-element=index]").appendChild(n),this.chessBoardController.promotionDialogContainer=n;const i=n.querySelector("dialog");null==i||i.show();const o=e=>{var n;const i=e.target,o=i.closest(".chess__promotion-piece");if(o){const e=null==(n=o.closest("[data-promotion-piece]"))?void 0:n.getAttribute("data-promotion-piece");return void(e&&(r(),t(e)))}if(i.closest("[data-element=promotion-cancel]"))return r(),void t(null);i.closest("[data-element=promotion-dialog-backdrop]")&&(r(),t(null))},r=()=>{n.removeEventListener("click",o),this.clearPromotionDialog()};n.addEventListener("click",o)})),t(this,"handlePromotionDialogEventsByDelegation",(e=>{var t;const n=e.target;if(!this.chessBoardController.promotionDialogContainer)return;const i=n.closest(".chess__promotion-piece");if(i){const e=null==(t=i.closest("[data-promotion-piece]"))?void 0:t.getAttribute("data-promotion-piece");return void(e&&(console.log({piece:e}),this.clearPromotionDialog()))}if(n.closest("[data-element=promotion-cancel]"))return void this.clearPromotionDialog();n.closest("[data-element=promotion-dialog-backdrop]")&&this.clearPromotionDialog()})),t(this,"movePiece",((e,t,n)=>{const i=a.getBoardIndicesFromAlgebraicNotation(t);e.moveTo(i,n)})),this.chessBoardController=n}};t(w,"getSquareSizeFromContainer",((e,t)=>{const n=e.querySelector("[data-square]");let i=n.offsetWidth;if(t){i=n.getBoundingClientRect().width}return i})),t(w,"highlightAttributes",{selected:"data-selected-square","can-move":"data-available-move",occupied:"data-occupied-by",checked:"data-checked","last-move":"data-last-move","drag-hover":"data-drag-hover"}),t(w,"attrMap",new Map(Object.entries(w.highlightAttributes)));let M=w;class C{constructor(e){t(this,"container"),t(this,"initialFen","rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"),t(this,"piecesMap",new Map),t(this,"squareElementsMap",new Map),t(this,"boardPerspective","white"),t(this,"positionRepetitionMap",new Map),t(this,"promotionDialogContainer",null),t(this,"allLegalMovesForCurrentPlayer",[]),t(this,"selectedPiece",null),t(this,"selectedPieceLegalMoves",null),t(this,"legalMovesForSelectedPiece",null),t(this,"currentTurn","black"),t(this,"whitePlayer"),t(this,"blackPlayer"),t(this,"enPassantSquare",null),t(this,"halfMoveClock",0),t(this,"fullMoveNumber",1),t(this,"isGamePlayable",!1),t(this,"isGameOver",null),t(this,"pgnMoveText",[]),t(this,"gameLogic"),t(this,"boardUI"),t(this,"test",(()=>{})),t(this,"clearTest",(()=>{})),t(this,"generateBoard",(()=>{this.boardUI.generateBoard()})),t(this,"updateAllLegalMovesForCurrentPlayer",(()=>{this.gameLogic.updateAllLegalMovesForCurrentPlayer()})),t(this,"showPromotionDialog",((e,t)=>this.boardUI.showPromotionDialog(e,t))),t(this,"addPiece",((e,t,n)=>{const i=a.normalizePosition(n);let o;this.piecesMap.has(i.algebraicNotation)?(o=this.piecesMap.get(i.algebraicNotation),o.moveTo(i,!1),this.piecesMap.delete(i.algebraicNotation)):(o=new l(e,t,i),o.attachToBoard(this.container)),this.setOccupiedSquare(i.algebraicNotation,o),this.piecesMap.set(i.algebraicNotation,o)})),t(this,"elementIsChessPiece",(e=>this.boardUI.elementIsChessPiece(e))),t(this,"getPieceFromElement",(e=>[...this.piecesMap.values()].find((t=>t.element===e))||null)),t(this,"selectPiece",(e=>{const t=this.getPieceFromElement(e);if(!t)return;if(t.color!==this.currentTurn)return void console.error("It's not your turn! Cannot select piece.");this.clearSelectedPiece(),this.selectedPiece=t;const{algebraicNotation:n}=t.position;this.highlightSelectedSquare(n,"add"),this.legalMovesForSelectedPiece=this.getLegalMovesForSelectedPiece(t),this.highlightLegalMoves(this.legalMovesForSelectedPiece,"add")})),t(this,"getLegalMovesForSelectedPiece",(e=>this.gameLogic.getLegalMovesForSelectedPiece(e))),t(this,"clearSelectedPiece",(e=>{const t=this.selectedPiece;if(!t)return;const n=e||t.position.algebraicNotation;this.highlightSelectedSquare(n,"remove"),this.highlightLegalMoves(this.legalMovesForSelectedPiece,"remove"),this.selectedPiece=null,this.legalMovesForSelectedPiece=null})),t(this,"elementIsPieceSelected",(e=>this.boardUI.elementIsPieceSelected(e))),t(this,"updatePlayerState",((e,t,n)=>{this.gameLogic.updatePlayerState(e,t,n)})),t(this,"switchTurnTo",(e=>{this.gameLogic.switchTurnTo(e)})),t(this,"movePiece",((e,t,n)=>{this.boardUI.movePiece(e,t,n)})),t(this,"updateSquareHighlight",(({targetSquares:e,type:t,mode:n="add",value:i="true",className:o=""})=>{this.boardUI.updateSquareHighlight({targetSquares:e,type:t,mode:n,value:i,className:o})})),t(this,"highlightCheck",(e=>{this.updateSquareHighlight({targetSquares:e,mode:"add",type:"checked"})})),t(this,"clearCheckHighlightSquare",(()=>{const e=this.container.querySelector("[data-checked]");if(!e)return;const t=e.dataset.algebraicNotation;this.updateSquareHighlight({targetSquares:t,mode:"remove",type:"checked"})})),t(this,"highlightSelectedSquare",((e,t="add")=>{this.updateSquareHighlight({targetSquares:e,type:"selected",mode:t})})),t(this,"highlightLegalMoves",((e,t="add")=>{this.updateSquareHighlight({targetSquares:e,type:"can-move",mode:t})})),t(this,"updateGameState",((e,t,n)=>{this.piecesMap.delete(e),this.clearOccupiedSquare(e),this.piecesMap.set(t,n),this.setOccupiedSquare(t,n)})),t(this,"setOccupiedSquare",((e,t)=>{this.updateSquareHighlight({targetSquares:e,type:"occupied",value:`${t.color}-${t.type}`,mode:"add"})})),t(this,"clearOccupiedSquare",(e=>{this.updateSquareHighlight({targetSquares:e,type:"occupied",mode:"remove"})})),t(this,"clearBoard",(()=>{for(const e of this.piecesMap.values())e.removePiece();this.piecesMap.clear();for(const e of this.squareElementsMap.values())e.removeAttribute("data-occupied-by"),e.removeAttribute("data-selected-square"),e.removeAttribute("data-available-move"),e.removeAttribute("data-checked"),e.classList.remove("test");this.gameLogic.resetBoardState(),this.boardUI.clearPromotionDialog(),this.clearLastMove()})),t(this,"getAllCastlingRights",(()=>({black:{kingSide:this.blackPlayer.canCastle.get("kingSide"),queenSide:this.blackPlayer.canCastle.get("queenSide")},white:{kingSide:this.whitePlayer.canCastle.get("kingSide"),queenSide:this.whitePlayer.canCastle.get("queenSide")}}))),t(this,"recordMoveAsHash",(()=>{this.gameLogic.recordMoveAsHash()})),t(this,"incrementHalfMoveClock",(e=>{const t="pawn"===e.piece.type||Boolean(e.promotion),n=!!e.capturedPiece;t||n?this.halfMoveClock=0:this.halfMoveClock++})),t(this,"incrementFullMoveNumber",(()=>{"white"!==this.currentPlayer.color&&this.fullMoveNumber++})),t(this,"getEnPassantCapturedSquare",((e,t)=>this.gameLogic.getEnPassantCapturedSquare(e,t))),t(this,"isEnPassantCapture",((e,t,n)=>this.gameLogic.isEnPassantCapture(e,t,n))),t(this,"removeCastlingRights",((e,t,n)=>{this.gameLogic.removeCastlingRights(e,t,n)})),t(this,"handleCastling",((e,t)=>{this.gameLogic.handleCastling(e,t)})),t(this,"handleEnPassantMarking",(e=>{this.enPassantSquare=this.gameLogic.getEnPassantMarking(e)})),t(this,"clearEnPassantMarking",(()=>{this.enPassantSquare=this.gameLogic.clearEnPassantMarking()})),t(this,"markLastMove",((e,t)=>{this.updateSquareHighlight({targetSquares:[e,t],type:"last-move",mode:"add"})})),t(this,"clearLastMove",(()=>{const e=this.container.querySelectorAll("[data-last-move]");for(const t of e)t.removeAttribute("data-last-move")})),t(this,"highlightDragHoveredSquare",(e=>{this.updateSquareHighlight({targetSquares:e,type:"drag-hover",mode:"add"})})),t(this,"clearDragHoveredSquare",(()=>{const e=this.container.querySelector("[data-drag-hover]");e&&e.removeAttribute("data-drag-hover")})),this.container=e,this.whitePlayer=new c("white"),this.blackPlayer=new c("black"),this.gameLogic=new S(this),this.boardUI=new M(this)}get currentPlayer(){return"white"===this.currentTurn?this.whitePlayer:this.blackPlayer}get rivalPlayer(){return"white"===this.currentTurn?this.blackPlayer:this.whitePlayer}get squareSize(){return M.getSquareSizeFromContainer(this.container)}}const N=class{};t(N,"interpretFen",(e=>{const[t,n,i,o,r,s]=e.split(" "),l=t.split("/"),c=[];for(let a=0;a<l.length;a++){const e=l[a].replace(/\d/g,(e=>" ".repeat(Number(e))));c.push(e)}const h="w"===n?"white":"black",d={white:{kingSide:i.includes("K"),queenSide:i.includes("Q")},black:{kingSide:i.includes("k"),queenSide:i.includes("q")}};let u=null;if("-"!==o){const[e,t]=o;u={square:o,fileIndex:a.reverseFileMap.get(e),rankIndex:a.reverseRankMap.get(t)}}return{pieces:c,sideToMove:h,castlingRights:d,enPassant:u,halfMoveClock:Number(r),fullMoveNumber:Number(s)}})),t(N,"generateFenFromPosition",(({piecesMap:e,currentTurn:t,castlingRights:n,enPassantSquare:i,halfMoveClock:o,fullMoveNumber:r})=>{let s="";for(let d=0;d<8;d++){let t=0;for(let n=0;n<8;n++){const i=a.getAlgebraicNotationFromBoardIndices(n,d),o=e.get(i);if(o){t>0&&(s+=t,t=0);const e=`${o.color}-${o.type}`;s+=l.pieceToFenSymbolMap.get(e)??"?"}else t++}t>0&&(s+=t),d<7&&(s+="/")}const c="white"===t?"w":"b",h=[];n.white.kingSide&&h.push("K"),n.white.queenSide&&h.push("Q"),n.black.kingSide&&h.push("k"),n.black.queenSide&&h.push("q");return`${s} ${c} ${h.length>0?h.join(""):"-"} ${i??"-"} ${o} ${r}`})),t(N,"validateFenSyntax",(e=>{const t=e.trim().split(/\s+/);if(6!==t.length)return!1;const[n,i,o,r,a,s]=t,l=n.split("/");if(8!==l.length)return!1;const c=/^[prnbqkPRNBQK1-8]+$/;for(const h of l){if(!c.test(h))return!1;let e=0;for(const t of h)/\d/.test(t)?e+=Number(t):e+=1;if(8!==e)return!1}return!!/^[wb]$/.test(i)&&(!!/^(-|[KQkq]{1,4})$/.test(o)&&(!!/^(-|[a-h][36])$/.test(r)&&(!!/^\d+$/.test(a)&&!!/^[1-9]\d*$/.test(s))))})),t(N,"createASCIIBoard",(e=>{const{pieces:t}=N.interpretFen(e),n=[...a.reverseFileMap.keys()],i=[...a.reverseRankMap.keys()],o="-".repeat(3),r="+"+Array(8).fill(o).join("+")+"+\n";let s=r;for(let a=0;a<8;a++){const e=t[a];s+="|";for(let t=0;t<8;t++){let n=e[t]||" ";const i=Math.floor((3-[...n].length)/2),o=3-i-[...n].length;s+=" ".repeat(i)+n+" ".repeat(o)+"|"}s+=` ${i[a]}\n`,s+=r}s+=" ";for(const a of n){const e=Math.floor(1),t=3-e;s+=" ".repeat(e)+a+" ".repeat(t)}return s+="\n",s})),t(N,"formatPgnMoves",(e=>{const t=[];for(let n=0;n<e.length;n+=2){const i=`${Math.floor(n/2)+1}. ${e[n]} ${e[n+1]||""}`.trim();t.push(i)}return t.join(" ")})),t(N,"recordPgnMove",(({move:e,isCheck:t,isCheckmate:n,castle:i,legalMoves:o})=>{if(i)return N.formatCastling(i);const{from:r,to:a,piece:s,capturedPiece:c,promotion:h}=e,d=l.isType(s.type,"pawn");return`${N.getPieceChar({piece:s,promotion:h})}${N.getDisambiguation({move:e,legalMoves:o})}${N.getCaptureIndicator({isPawnMove:d||Boolean(h),from:r,capturedPiece:c})}${a}${N.getPromotionText(h)}${N.getCheckOrCheckMateSuffix({isCheck:t,isCheckmate:n})}`})),t(N,"formatCastling",(e=>"kingSide"===e?"O-O":"O-O-O")),t(N,"getPieceChar",(({piece:e,promotion:t})=>l.isType(e.type,"pawn")||t?"":e.pgnSymbol)),t(N,"getDisambiguation",(({move:e,legalMoves:t})=>{const{from:n,to:i,piece:o}=e;if(l.isType(o.type,"pawn"))return"";const[r,a]=n,s=t.filter((({piece:e,moves:t})=>(e=>e.type===o.type&&e.color===o.color&&e.position.algebraicNotation!==n)(e)&&t.includes(i))).map((({piece:e})=>e));if(!s.length)return"";const c=s.some((e=>e.position.algebraicNotation[0]===r)),h=s.some((e=>e.position.algebraicNotation[1]===a));return c?h?r+a:a:r})),t(N,"getCaptureIndicator",(({isPawnMove:e,from:t,capturedPiece:n})=>{if(!n)return"";const[i]=t;return e?`${i}x`:"x"})),t(N,"getPromotionText",(e=>{if(!e)return"";return`=${l.getPgnSymbol(e)}`})),t(N,"getCheckOrCheckMateSuffix",(({isCheck:e,isCheckmate:t})=>t?"#":e?"+":""));let q=N;class I{constructor(e){t(this,"isPressing",!1),t(this,"pressedElement",null),t(this,"initXOffset",NaN),t(this,"initYOffset",NaN),t(this,"lastRecordedPositions",{pageX:NaN,pageY:NaN,clientX:NaN,clientY:NaN,containerX:NaN,containerY:NaN}),t(this,"controller",new AbortController),t(this,"listenersMap",new Map),t(this,"animationFrameId",NaN),t(this,"container"),t(this,"pointerDownTime",NaN),t(this,"DRAG_TIME_THRESHOLD_MS",85),t(this,"dragStartTimeout"),t(this,"dragStarted"),t(this,"initializeEventListeners",(()=>{const e=[{eventName:"pointerup",callback:this.handlePointerUp},{eventName:"pointerdown",callback:this.handlePointerDown},{eventName:"pointermove",callback:this.handlePointerMove},{eventName:"pointercancel",callback:this.handlePointerCancel},{eventName:"pointerleave",callback:this.handlePointerLeave}];for(const{eventName:t,callback:n}of e)this.container.addEventListener(t,n,{signal:this.controller.signal})})),t(this,"on",((e,t,n)=>(this.listenersMap.set(e,t),this.container.addEventListener(e,(e=>{t(e)}),{signal:n||this.controller.signal}),this))),t(this,"off",(e=>{const t=this.listenersMap.get(e);return t?(this.container.removeEventListener(e,t),this.listenersMap.delete(e),this):(console.warn("Event listener not found for",e,", skipping"),this)})),t(this,"destroyAll",(()=>(this.controller.abort(),this))),t(this,"dispatchEvent",((e,t)=>{const n=new CustomEvent(e,{detail:t});return this.container.dispatchEvent(n),this})),t(this,"cancelAnimationFrame",(()=>{cancelAnimationFrame(this.animationFrameId)})),t(this,"handlePointerDown",(e=>{var t,n,i,o;e.preventDefault(),this.pointerDownTime=performance.now();const r="mouse"===e.pointerType&&0===e.button||"touch"===e.pointerType;this.isPressing=r,this.pressedElement=e.target;const a=null==(n=(t=this.pressedElement).getBoundingClientRect)?void 0:n.call(t),s=null==(o=(i=this.container).getBoundingClientRect)?void 0:o.call(i);this.initXOffset=e.pageX+s.x-a.x,this.initYOffset=e.pageY+s.y-a.y;const l=Object.keys(this.lastRecordedPositions).filter((e=>"adjustedX"!==e&&"adjustedY"!==e)),c=this.getCustomEventDetails(e,l);this.lastRecordedPositions={...c,...this.lastRecordedPositions},this.listenersMap.has("custom:pointer-drag-hold")&&this.startDragHoldLoop()})),t(this,"handlePointerMove",(e=>{var t,n;if(!this.isPressing)return;const i=performance.now()-this.pointerDownTime,o=null==(n=(t=this.container).getBoundingClientRect)?void 0:n.call(t),r=e.pageX-o.x,a=e.pageY-o.y;i>=this.DRAG_TIME_THRESHOLD_MS&&!this.dragStarted&&(this.lastRecordedPositions.containerX=r,this.lastRecordedPositions.containerY=a,this.dispatchEvent("custom:pointer-drag-start",{adjustedX:r,adjustedY:a}),this.dragStarted=!0),this.dragStarted&&this.dispatchEvent("custom:pointer-drag-move",{pageX:e.pageX,pageY:e.pageY,movementX:e.movementX,movementY:e.movementY,adjustedX:r,adjustedY:a})})),t(this,"getCustomEventDetails",((e,t)=>{const n={};for(const i of t)e[i]&&(n[i]=e[i]);return n})),t(this,"handlePointerUp",(e=>{var t,n;const i=performance.now()-this.pointerDownTime;if(clearTimeout(this.dragStartTimeout),i<this.DRAG_TIME_THRESHOLD_MS)this.dispatchEvent("custom:pointer-drag-click",{clickedElement:e.target});else{const i=null==(n=(t=this.container).getBoundingClientRect)?void 0:n.call(t),o=e.pageX-i.x,r=e.pageY-i.y;this.lastRecordedPositions.containerX=o,this.lastRecordedPositions.containerY=r,this.dispatchEvent("custom:pointer-drag-end",{pageY:e.pageY,pageX:e.pageX,movementY:e.movementY,movementX:e.movementX})}this.resetAllState()})),t(this,"handlePointerLeave",(e=>{this.dispatchEvent("custom:pointer-drag-leave")})),t(this,"handlePointerCancel",(e=>{this.dispatchEvent("custom:pointer-drag-cancel")})),t(this,"resetPointerState",(e=>{e.preventDefault(),this.resetAllState()})),t(this,"resetAllState",(()=>{this.isPressing=!1,this.pressedElement=null,this.cancelAnimationFrame(),this.animationFrameId=NaN,this.dragStarted=!1})),t(this,"startDragHoldLoop",(()=>{if(this.animationFrameId)return void console.warn("loop already started",this.animationFrameId);const e=()=>{this.isPressing?(this.animationFrameId=requestAnimationFrame(e),this.dispatchEvent("custom:pointer-drag-hold")):this.cancelAnimationFrame()};this.animationFrameId=requestAnimationFrame(e)}));if(Boolean(e)&&!(e instanceof HTMLElement))throw new TypeError("Container must be an HTMLElement");this.container=e||document.body,this.initializeEventListeners()}}t(I,"computeOffsetFromContainer",((e,t,n)=>{if(!(n instanceof HTMLElement))throw new TypeError("Container must be an HTMLElement");const i=n.getBoundingClientRect();return{x:e-i.x,y:t-i.y}})),t(I,"computeRelativeViewportYOffset",(e=>{var t,n;const i=(null==(t=window.visualViewport)?void 0:t.height)||window.innerHeight,o=(e-((null==(n=window.visualViewport)?void 0:n.offsetTop)||0))/i;return Math.round(100*o)})),t(I,"normalizeYOffsetFromCenter",(e=>2*(e-50)));class B{constructor(e,n){t(this,"userPointer"),t(this,"callbacks",{}),t(this,"chessBoardElement"),t(this,"draggedPiece",null),t(this,"startSquare",null),t(this,"setCallbacks",(e=>{this.callbacks={...this.callbacks,...e}})),t(this,"attachEvents",(()=>{this.userPointer.on("custom:pointer-drag-click",this.handleClick),this.userPointer.on("custom:pointer-drag-start",this.handleDragStart),this.userPointer.on("custom:pointer-drag-move",this.handleDragMove),this.userPointer.on("custom:pointer-drag-end",this.handleDragEnd)})),t(this,"handleClick",(e=>{var t,n,i,o;const{clickedElement:r}=e.detail,a=this.getSquareFromElement(r);this.startSquare=a,this.isChessPiece(r)?null==(n=(t=this.callbacks).onPieceClick)||n.call(t,r,a):null==(o=(i=this.callbacks).onEmptySquareClick)||o.call(i,a)})),t(this,"handleDragStart",(e=>{var t,n;const i=this.userPointer.pressedElement;if(!this.isChessPiece(i))return;const{adjustedX:o,adjustedY:r}=e.detail;this.draggedPiece=i,this.startSquare=this.getSquareFromElement(this.draggedPiece),null==(n=(t=this.callbacks).onDragStart)||n.call(t,this.draggedPiece,this.startSquare)})),t(this,"handleDragMove",(e=>{var t,n;if(!this.draggedPiece)return;const{pageX:i,pageY:o,adjustedX:r,adjustedY:a}=e.detail;let s=null;this.coordsAreWithinBounds(i,o)&&(s=this.getSquareFromCoords(r,a));const l=i-this.userPointer.initXOffset,c=o-this.userPointer.initYOffset;null==(n=(t=this.callbacks).onDragMove)||n.call(t,this.draggedPiece,l,c,s)})),t(this,"handleDragEnd",(e=>{var t,n;if(!this.draggedPiece)return;const{pageX:i,pageY:o}=e.detail,r=this.coordsAreWithinBounds(i,o),{containerX:a,containerY:s}=this.userPointer.lastRecordedPositions,l=this.getSquareFromCoords(a,s);null==(n=(t=this.callbacks).onDrop)||n.call(t,this.draggedPiece,this.startSquare,l,r),this.draggedPiece=null,this.startSquare=null})),t(this,"getIndicesFromCoords",((e,t)=>[Math.floor(e/this.squareSize),Math.floor(t/this.squareSize)])),t(this,"getSquareFromCoords",((e,t)=>{const[n,i]=this.getIndicesFromCoords(e,t);return a.getAlgebraicNotationFromBoardIndices(n,i)})),t(this,"isChessPiece",(e=>!!e&&e.hasAttribute("data-piece"))),t(this,"coordsAreWithinBounds",((e,t)=>{const n=this.chessBoardElement.getBoundingClientRect();return e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom})),t(this,"getSquareFromElement",(e=>{var t;return null==(t=null==e?void 0:e.dataset)?void 0:t.algebraicNotation})),this.chessBoardElement=e,this.userPointer=n||new I(e),this.attachEvents()}get squareSize(){return M.getSquareSizeFromContainer(this.chessBoardElement)}}const x=class e extends C{constructor(n){super(n),t(this,"uiDragManager"),t(this,"handleDragStart",(e=>{this.selectPiece(e)})),t(this,"handleDragMove",((e,t,n,i)=>{const o=this.getPieceFromElement(e);o.color===this.currentTurn?(this.dragPiece(o,t,n),this.clearDragHoveredSquare(),i&&this.highlightDragHoveredSquare(i)):console.error("It's not your turn! Cannot drag piece.")})),t(this,"handleDrop",((e,t,n,i)=>{this.clearDragHoveredSquare(),console.log("custom:pointer-drag-drop");const o=this.getPieceFromElement(e);if(!i)return o.moveTo(o.position,!1),void this.clearSelectedPiece();const{rankIndex:r,fileIndex:s}=a.getBoardIndicesFromAlgebraicNotation(n);console.log(n),this.updatePiecePosition(o,Number(r),Number(s),!0),this.clearSelectedPiece()})),t(this,"handlePieceClick",(e=>{console.log("custom:pointer-click"),e.classList.remove("dragging");const t=this.getPieceFromElement(e);this.selectedPiece?t===this.selectedPiece?this.clearSelectedPiece():t.color===this.selectedPiece.color?this.selectPiece(e):this.selectedPiece&&t.color!==this.selectedPiece.color&&this.updatePiecePosition(this.selectedPiece,Number(t.position.rankIndex),Number(t.position.fileIndex),!1):this.selectPiece(e)})),t(this,"handleEmptySquareClick",(e=>{if(!this.selectedPiece)return;const{fileIndex:t,rankIndex:n}=a.getBoardIndicesFromAlgebraicNotation(e);this.updatePiecePosition(this.selectedPiece,Number(n),Number(t),!1),this.clearSelectedPiece()})),t(this,"dragPiece",((e,t,n)=>{if(e.color!==this.currentTurn)return e.moveTo(e.position,!0),void console.error("It's not your turn! Cannot drag piece.");e.drag(t,n)})),t(this,"updatePiecePosition",(async(e,t,n,i=!1)=>{const o=a.getAlgebraicNotationFromBoardIndices(n,t),r=e.position.algebraicNotation;if(r===o)return void this.rejectMove(e,i);if(!d.isMoveLegal(this,e,o))return void this.rejectMove(e,i);const s=this.createMove(e,r,o);if(d.canPromotePawn(e,o)){console.log("Pawn promotion available");const t=await this.showPromotionDialog(o,e.color);if(!t)return console.log("Promotion cancelled"),void this.rejectMove(e,i);e.promotePawn(t),s.promotion=t}this.applyMove(s,i),this.clearSelectedPiece(r)})),t(this,"rejectMove",((e,t)=>{console.error("Move rejected, putting piece back."),e.moveTo(e.position,t)})),t(this,"createMove",((e,t,n)=>{if(this.isEnPassantCapture(e,t,n)){const i=this.getEnPassantCapturedSquare(n,e.color);console.log("en passant,capturedSquare",i);const o=this.piecesMap.get(i),r="pawn"===(null==o?void 0:o.type)&&o.color!==e.color;return console.log("en passant,captured",o,r),{from:t,to:n,piece:e,capturedPiece:r?o:void 0,promotion:void 0}}return{from:t,to:n,piece:e,capturedPiece:this.piecesMap.get(n)??void 0,promotion:void 0}})),t(this,"capturePiece",((e,t)=>{const n=!t;e.removePiece({animate:n});const{algebraicNotation:i}=e.position;this.piecesMap.delete(i),this.clearOccupiedSquare(i)})),t(this,"applyMove",((e,t)=>{const n=this.allLegalMovesForCurrentPlayer,{from:i,to:o,piece:r,capturedPiece:s}=e;this.clearLastMove(),this.markLastMove(i,o),s&&this.capturePiece(s,t),this.movePiece(r,o,t),this.updateGameState(i,o,r);const l=r.isCastlingMove(i,o);l&&this.handleCastling(e,t),r.isPawnDoubleAdvance(i,o)?this.handleEnPassantMarking(o):this.clearEnPassantMarking();const c=this.legalMovesForSelectedPiece||[];this.highlightLegalMoves(c,"remove"),this.recordMoveAsHash(),this.incrementHalfMoveClock(e),this.incrementFullMoveNumber(),this.updateCheckStateFor(this.currentPlayer,r,i),this.updateCheckStateFor(this.rivalPlayer),this.switchTurnTo(),this.updateAllLegalMovesForCurrentPlayer(),this.checkGameEndConditions();const h=q.generateFenFromPosition({currentTurn:this.currentTurn,enPassantSquare:this.enPassantSquare,halfMoveClock:this.halfMoveClock,fullMoveNumber:this.fullMoveNumber,piecesMap:this.piecesMap,castlingRights:this.getAllCastlingRights()});console.log("fen",h),console.log(this.currentPlayer);const d=l?a.getCastlingSide(i,o,r.color):null,u=q.recordPgnMove({castle:d,isCheck:this.currentPlayer.inCheck,legalMoves:n,move:e,isCheckmate:"checkmate"===this.isGameOver});this.pgnMoveText.push(u);const g=this.pgnMoveText.join(" ");console.log("PGN:",g),console.log("formatted:",q.formatPgnMoves(this.pgnMoveText))})),t(this,"updateCheckStateFor",((t,n,i)=>{const o=d.isKingInCheck(this.piecesMap,t),r=e.getPieceFromArray(this.piecesMap,"king",t.color);o?this.highlightCheck(r.position.algebraicNotation):this.clearCheckHighlightSquare(),n&&i&&l.isType(n.type,["king","rook"])&&(this.removeCastlingRights(t,n,i),console.log({player:t}),console.log("white:",this.whitePlayer.canCastle,"black:",this.blackPlayer.canCastle)),this.updatePlayerState(t,o,{kingSide:t.canCastle.get("kingSide"),queenSide:t.canCastle.get("queenSide")})})),t(this,"checkGameEndConditions",(()=>{const e=this.currentPlayer,t=this.allLegalMovesForCurrentPlayer;if(d.isCheckmate({legalMoves:t,currentPlayer:e})){const e=this.rivalPlayer.color;this.endGame({winner:e,reason:"checkmate"})}else d.isStalemate({legalMoves:t,currentPlayer:e})?this.endGame({winner:null,reason:"stalemate"}):d.isThreefoldRepetitionDraw(this.positionRepetitionMap)?this.endGame({winner:null,reason:"threefold-repetition"}):d.isFiftyMoveRuleDraw(this.halfMoveClock)?this.endGame({winner:null,reason:"50-move-rule"}):d.isInsufficientMaterialDraw(this.piecesMap)&&this.endGame({winner:null,reason:"insufficient-checkmating-material"})})),t(this,"endGame",(({winner:e,reason:t})=>{this.isGameOver=t,e?(alert(`Game over! ${e} wins by ${t}`),console.log(`%c${e} wins by checkmate !!!`,`background: ${e}; color: ${"white"===e?"black":"white"}; padding: 5px;`)):(alert(`Game over! Draw by ${t}`),console.log(`%cDraw by ${t}`,"background: grey; color: black; padding: 5px;"))})),t(this,"loadFen",(e=>{console.log("loadFen",e);if(!q.validateFenSyntax(e))return void alert("Invalid FEN syntax");const{pieces:t,sideToMove:n,castlingRights:i,enPassant:o,halfMoveClock:r,fullMoveNumber:s}=q.interpretFen(e);this.clearBoard();for(let h=0;h<8;h++)for(let e=0;e<8;e++){const n=t[h][e];if(/\s+/g.test(n))continue;const i=l.fenSymbolToPieceMap.get(n);if(!i)throw new Error(`Invalid piece character in FEN: "${n}"`);const o=a.getAlgebraicNotationFromBoardIndices(e,h);this.addPiece(i.type,i.color,o)}const c=q.createASCIIBoard(e);console.log(c),this.currentTurn=n,this.enPassantSquare=(null==o?void 0:o.square)??null,this.halfMoveClock=r,this.fullMoveNumber=s,this.recordMoveAsHash(),this.updatePlayerState(this.whitePlayer,!1,i.white),this.updatePlayerState(this.blackPlayer,!1,i.black),this.updateCheckStateFor(this.whitePlayer),this.updateCheckStateFor(this.blackPlayer),this.updateCheckStateFor(this.currentPlayer),this.updateAllLegalMovesForCurrentPlayer(),console.log({castlingRights:i}),this.isGamePlayable=d.isFenPositionPlayable(this),console.log(`%cGame is playable: ${this.isGamePlayable}`,"background: "+(this.isGamePlayable?"green":"red")),this.isGamePlayable||alert("Game is not playable! Please fix the board and try again.")})),t(this,"loadPgn",(e=>{})),this.generateBoard(),this.uiDragManager=new B(n),this.uiDragManager.setCallbacks({onDragStart:this.handleDragStart,onDragMove:this.handleDragMove,onDrop:this.handleDrop,onPieceClick:this.handlePieceClick,onEmptySquareClick:this.handleEmptySquareClick})}};t(x,"getPlayerMaterial",((e,t)=>{const n=new Map(Object.entries({kings:0,pawns:0,bishops:0,knights:0,rooks:0,queens:0})),i=new Set;for(const[o,r]of e.entries()){if(r.color!==t)continue;const e=`${r.type}s`;if(n.has(e)){const t=n.get(e)??0;n.set(e,t+1)}if("bishop"===r.type){const e=a.isSquareOfType(o,"light")?"light":"dark";i.add(e)}}return{...Object.fromEntries(n.entries()),bishopColors:i}})),t(x,"getPieceFromArray",((e,t,n,i)=>{e instanceof Map&&(e=[...e.values()]);return e.find((e=>{const o=e.type===t&&e.color===n;return i?o&&e.position.algebraicNotation===i:o}))||null}));let F=x;window.addEventListener("beforeunload",(e=>{new URL(window.location.href).hostname}));const A=o('[data-element="analysis-tab"]');o('[data-element="fen-input"]'),o('[data-element="pgn-input"]'),A.addEventListener("submit",(e=>{e.preventDefault();const t=e.currentTarget,n=new FormData(t),i=new Map(n.entries()),o=i.get("fen");o&&T.loadFen(o);const r=i.get("pgn");r&&T.loadPgn(r)}));const E=o('[data-element="chess-board"]'),T=new F(E);T.loadFen("r3k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w Qq - 0 1");
